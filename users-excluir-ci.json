{
	"info": {
		"_postman_id": "495648c8-693c-49e8-9025-3d99fd5eb139",
		"name": "Users - Excluir",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27946330"
	},
	"item": [
		{
			"name": "Excluir cadastro de login",
			"item": [
				{
					"name": "Realizando o Login com sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Salvar o token na variavel global\r",
									"pm.globals.set(\"tokenLogin\", JSON.parse(responseBody).token);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"mail\": \"{{emailAdm}}\",\r\n  \"password\": \"{{senhaAdm}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/login/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Contagem atual de usuários cadastrados",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Salvar o total para ser utilizado nos próximos testes\r",
									"pm.environment.set(\"count_user\", pm.response.json().count);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user/count",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastro de novo usuário",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"FullName\",pm.variables.replaceIn('{{$randomFullName}}'))\r",
									"\r",
									"pm.environment.set(\"EmailUser\",pm.variables.replaceIn('{{$randomEmail}}'))\r",
									"\r",
									"\r",
									"// Gerar um número inteiro aleatório de 11 dígitos (CPF)\r",
									"var randomNumber = Math.floor(Math.random() * 100000000000); // Gera um número aleatório entre 0 e 99999999999\r",
									"var random11Digits = randomNumber.toString().padStart(11, '0');\r",
									"pm.environment.set(\"Random11Digits\", random11Digits);\r",
									"\r",
									"// Gerar senha aleatoria\r",
									"const specialChars = '!@#$%';\r",
									"const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz';\r",
									"const numbers = '0123456789';\r",
									"\r",
									"// Gerar senha aleatória a partir da variável randomBankAccount\r",
									"let randomBankAccount = pm.variables.replaceIn('{{$randomBankAccount}}');\r",
									"randomBankAccount += specialChars[Math.floor(Math.random() * specialChars.length)];\r",
									"randomBankAccount += upperCaseLetters[Math.floor(Math.random() * upperCaseLetters.length)];\r",
									"randomBankAccount += lowerCaseLetters[Math.floor(Math.random() * lowerCaseLetters.length)];\r",
									"pm.environment.set(\"RandomPassword\", randomBankAccount);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Salvar o ID gerado para ser utlizado nos próximos testes",
									"pm.environment.set(\"id_user\", pm.response.json().user._id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{EmailUser}}\",\r\n  \"password\": \"{{RandomPassword}}\",\r\n  \"accessProfile\": \"{{TypeProfile}}\",\r\n  \"cpf\": \"{{Random11Digits}}\",\r\n  \"confirmPassword\": \"{{RandomPassword}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url_base}}/api/user/",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirmação de criação de cadastro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar se o ID está presente na lista de IDs\", function () {\r",
									"    // Extrair o ID salvo na variável\r",
									"    var savedId = pm.variables.get(\"id_user\");\r",
									"    \r",
									"    // Converter o corpo da resposta para JSON\r",
									"    var responseBody = pm.response.json();\r",
									"    \r",
									"    // Extrair a lista de IDs do corpo da resposta\r",
									"    var ids = responseBody.map(function(item) {\r",
									"        return item._id;\r",
									"    });\r",
									"    \r",
									"    // Verificar se o ID salvo está presente na lista de IDs\r",
									"    pm.expect(ids).to.include(savedId);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validação de atualização da contagem de usuários após cadastro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar se o valor em 'count' é maior que o valor em 'count_user' e atualizar 'count_user' se necessário\", function () {\r",
									"    // Extrair o valor de 'count' da resposta\r",
									"    var countValue = pm.response.json().count;\r",
									"    \r",
									"    // Extrair o valor de 'count_user' da variável\r",
									"    var countUser = pm.variables.get(\"count_user\");\r",
									"    \r",
									"    // Verificar se o valor de 'count' é maior que o valor de 'count_user'\r",
									"    if (countValue > countUser) {\r",
									"        // Se for maior, atualizar 'count_user' com o novo valor\r",
									"        pm.variables.set(\"count_user\", countValue);\r",
									"    }\r",
									"    else {\r",
									"        // Se não for maior, apresentar o teste como erro com uma mensagem \r",
									"        pm.expect.fail(\"O valor de 'count' na resposta não é maior que o valor atual de 'count_user'.\");\r",
									"    }\r",
									"\r",
									"    // Verificar se o valor de 'count' é maior que o valor de 'count_user'\r",
									"    pm.expect(countValue).to.be.above(countUser);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user/count",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exclusão  de usuário existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Usuário deletado com sucesso!.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user/{{id_user}}",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								"{{id_user}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validação de remoção de usuário da lista",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar se o ID não está presente na lista de IDs\", function () {\r",
									"    // Extrair o ID salvo na variável\r",
									"    var savedId = pm.variables.get(\"id_user\");\r",
									"    \r",
									"    // Converter o corpo da resposta para JSON e Extrair a lista de IDs do corpo da resposta\r",
									"    var responseBody = pm.response.json();\r",
									"    var ids = responseBody.map(function(item) {\r",
									"        return item._id;\r",
									"    });\r",
									"    \r",
									"    // Verificar se o ID salvo não está presente na lista de IDs\r",
									"    pm.expect(ids).to.not.include(savedId);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validação de atualização da contagem de usuários após exclusão",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verificar se o valor em 'count' é menor que o valor em 'count_user'\", function () {\r",
									"    // Extrair o valor de 'count' da resposta\r",
									"    var countValue = pm.response.json().count;\r",
									"    \r",
									"    // Extrair o valor de 'count_user' da variável\r",
									"    var countUser = pm.variables.get(\"count_user\");\r",
									"    \r",
									"    // Verificar se o valor de 'count' é menor que o valor de 'count_user'\r",
									"    pm.expect(countValue).to.be.below(countUser);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user/count",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tentativa de exclusão sem fornecer token de acesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"No token provided.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user/65d69484e9b97201f8a9da0e",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								"65d69484e9b97201f8a9da0e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tentativa de exclusão com token inválido",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Failed to authenticate token.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "342342343242NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NTMzMGU3ZjBlMTZiYmU3M2VkMWUxYzEiLCJmdWxsTmFtZSI6IlFhLUNvZGVycy1TWVNBRE1JTiIsIm1haWwiOiJzeXNhZG1pbkBxYWNvZGVycy5jb20iLCJwYXNzd29yZCI6IiQyYiQxMCRZWWpPM1d3ZlgwOHROMHJTWkQ1UVVlWW0wb2h1cGJCTkdzZnFUc3hnUHdIalMyYnFvcGR1eSIsImFjY2Vzc1Byb2ZpbGUiOiJTWVNBRE1JTiIsImNwZiI6IjExMTExMTExMTExIiwic3RhdHVzIjp0cnVlLCJhdWRpdCI6W3sicmVnaXN0ZXJlZEJ5Ijp7InVzZXJJZCI6IjExMTExMTExMTExMTExMTExMSIsInVzZXJMb2dpbiI6InN5c2FkbWluQHFhY29kZXJzLmNvbSJ9LCJyZWdpc3RyYXRpb25EYXRlIjoic2V4dGEtZmVpcmEsIDIwLzEwLzIwMjMsIDIwOjM0OjIzIEJSVCIsInJlZ2lzdHJhdGlvbk51bWJlciI6IjAxIiwiY29tcGFueUlkIjoiUWEuQ29kZXJzIiwiX2lkIjoiNjUzMzBlN2YwZTE2YmJlNzNlZDFlMWMyIn1dLCJfX3YiOjAsImlhdCI6MTcwODk2MDA2MCwiZXhwIjoxNzA5MDQ2NDYwfQ.HafeqYPlfk5QkjM5aiWNzEDxB7f-v0_yLibrbwkbBCI",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user/65d69484e9b97201f8a9da0e",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								"65d69484e9b97201f8a9da0e"
							]
						}
					},
					"response": []
				},
				{
					"name": "Tentativa de operar com ID inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Esse usuário não existe em nossa base de dados.\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url_base}}/api/user/56d69484e9b97201f7a9da0a",
							"host": [
								"{{url_base}}"
							],
							"path": [
								"api",
								"user",
								"56d69484e9b97201f7a9da0a"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}